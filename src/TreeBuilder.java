import java.io.*;
import java.util.PriorityQueue;

public class TreeBuilder {
    final int SHOVE = 128;
    int[] frequencies = new int[256];
    byte[] data;

    public void HuffTree(){
        try {
            DataInputStream innfil = new DataInputStream(new BufferedInputStream(new FileInputStream("src//opg12.txt")));
            byte x;
            while (true){
                try {
                    x = innfil.readByte();
                    char c = (char) x;
                    frequencies[(int) x + SHOVE]++;
                }catch (EOFException e){
                    break;
                }
            }

            PriorityQueue<HuffmanNode> hQueue = new PriorityQueue<>(frequencies.length, new MyComparator());
            for (int i=0;i<frequencies.length;i++){
                HuffmanNode node = new HuffmanNode();
                int v = i-SHOVE;
                node.c = (char) v;
                node.freq = frequencies[i];

                node.left = null;
                node.right = null;

                hQueue.add(node);
            }

            HuffmanNode root = null;

            while (hQueue.size()>1){
                HuffmanNode one = hQueue.peek();
                hQueue.poll();

                HuffmanNode two = hQueue.peek();
                hQueue.poll();

                if(two == null){
                    HuffmanNode newInnerNode = new HuffmanNode();

                    newInnerNode.freq = one.freq;
                    newInnerNode.left = one;

                    root = newInnerNode;

                    hQueue.add(newInnerNode);
                }else{
                    HuffmanNode newInnerNode = new HuffmanNode();

                    newInnerNode.freq = one.freq + two.freq;

                    newInnerNode.left = one;
                    newInnerNode.right = two;

                    root = newInnerNode;

                    hQueue.add(newInnerNode);
                }
            }
            printCode(root, "");

        } catch (IOException e){
            System.out.println(e);
        }


    }


    //FROM GEEKSFORGEEKS
    public static void printCode(HuffmanNode root, String s)
    {

        // base case; if the left and right are null
        // then its a leaf node and we print
        // the code s generated by traversing the tree.
        if (root.isLeaf()) {

            // c is the character in the node
            System.out.println(root.c + ":" + s);

            return;
        }

        // if we go to left then add "0" to the code.
        // if we go to the right add"1" to the code.

        // recursive calls for left and
        // right sub-tree of the generated tree.
        printCode(root.left, s + "0");
        printCode(root.right, s + "1");
    }

    public static void main(String[] args) {
        TreeBuilder tb = new TreeBuilder();
        tb.HuffTree();
        System.out.println((char) -61);
    }

}
